@import 'sass-partial/parameters';
@import 'sass-partial/context';
@import 'sass-partial/get-btn-height';
@import 'sass-partial/map-contain';

/**
 * thumbnail
 * =========
 */

.thumbnail {
  border-width: $tbnl--border-width;
  border-style: solid;
  border-color: $tbnl--border-color;
  border-radius: $tbnl--border-radius;
  display: block;
  text-decoration: none;
  color: inherit;
  transition-property: box-shadow;
  transition-duration: $tbnl--transition-duration;
  transition-timing-function: $tbnl--transition-timing-function;
  font-size: $tbnl--font-size;
  display: flex;
  flex-direction: column;
  width: 100%;

  @if $thumbnail-banner--generation {
    position: relative;
    overflow: hidden;
  }

  @if $tbnl--box-shadow != none {
    box-shadow: $tbnl--box-shadow;
  }

  &:hover {
    @if $tbnl-hover--box-shadow != none {
      box-shadow: $tbnl-hover--box-shadow;
    }
  }

  &,
  * {
    box-sizing: border-box;
  }
}

@each $sizes, $properties in $tbnl--sizes {
  .thumbnail--#{$sizes} {
    font-size: map-get($properties, 'font-size');
  }
}


/**
 * thumbnail__content
 * ------------------
 */

.thumbnail__content {
  position: relative;
  flex-grow: 1;
}



/**
 * thumbnail__img
 * --------------
 */

.thumbnail__img {
  width: if($tbnl-img--inner, calc(100% + #{$tbnl--border-width * 2}), 100%);
  display: block;
  background-size: cover;
  background-position: center;
  border-top-left-radius: if($tbnl-img--inner, $tbnl--border-radius, $tbnl--border-radius - $tbnl--border-width);
  border-top-right-radius: if($tbnl-img--inner, $tbnl--border-radius, $tbnl--border-radius - $tbnl--border-width);
  user-select: none;

  @if $tbnl-img--inner {
    margin-top: -$tbnl--border-width;
    margin-left: -$tbnl--border-width;
  }
}

@each $sizes, $properties in $tbnl--sizes {
  .thumbnail__img--#{$sizes} {
    height: map-get($properties, 'img-height');
  }
}


/**
 * thumbnail__body
 * ---------------
 */

.thumbnail__body {
  display: block;
  padding: $tbnl-body--padding;

  @each $size, $properties in $tbnl--sizes {
    @include when-sibling-btn($size, false) {
      padding-bottom: map-get($properties, 'body-padding') * 2 + get-btn-height($size);
    }

    @include when-sibling-btn($size, true) {
      padding-bottom: map-get($properties, 'body-padding') + get-btn-height($size);
    }
  }
}

@each $sizes, $properties in $tbnl--sizes {
  .thumbnail__body--#{$sizes} {
    padding: map-get($properties, 'body-padding');
  }
}


/**
 * thumbnail__btn
 * --------------
 */

.thumbnail__btn {
  display: inline-block;
  margin: 0 $tbnl-body--padding $tbnl-body--padding;
  border-style: solid;
  transition-property: background-color, color, border-color;
  transition-duration: $tbnl--transition-duration;
  transition-timing-function: $tbnl--transition-timing-function;
  user-select: none;
  position: absolute;
  bottom: 0;
}

// themes
@each $theme, $properties in $tbnl-btn--themes {
  .thumbnail__btn--theme-#{$theme} {
    background-color: map-get($properties, 'background-color');
    color: map-get($properties, 'color');
    border-color: map-get($properties, 'border-color');

    @include when-tbnl-hovered {
      background-color: map-get($properties, 'background-color--hover');
      color: map-get($properties, 'color--hover');
      border-color: map-get($properties, 'border-color--hover');
    }
  }
}

// sizes
@each $size, $properties in $tbnl--sizes {
  .thumbnail__btn--#{$size} {
    padding: map-get($properties, 'btn-padding-y') map-get($properties, 'btn-padding-x');
    font-size: map-get($properties, 'btn-font-size');
    line-height: map-get($properties, 'btn-line-height');
    border-width: map-get($properties, 'btn-border-width');
    font-weight: map-get($properties, 'btn-font-weight');
    border-radius: map-get($properties, 'btn-border-radius');
  }
}

// positions
@if map-contains($tbnl-btn--position, 'left') {
  .thumbnail__btn--left {
    left: 0;
  }
}

@if map-contains($tbnl-btn--position, 'right') {
  .thumbnail__btn--right {
    right: 0;
  }
}

@if map-contains($tbnl-btn--position, 'center') {
  .thumbnail__btn--center {
    left: 50%;
    transform: translateX(-50%);
    white-space: nowrap;
    margin-left: 0;
    margin-right: 0;
  }
}

@if map-contains($tbnl-btn--position, 'block') {
  .thumbnail__btn--block {
    margin: 0;
    border-radius: 0;
    text-align: center;
    width: if($tbnl-img--inner, calc(100% + #{$tbnl--border-width * 2}), 100%);
    border-bottom-left-radius: if($tbnl-img--inner, $tbnl--border-radius, $tbnl--border-radius - $tbnl--border-width);
    border-bottom-right-radius: if($tbnl-img--inner, $tbnl--border-radius, $tbnl--border-radius - $tbnl--border-width);
    border-color: transparent;

    @if $tbnl-img--inner {
      margin-bottom: -$tbnl--border-width;
      margin-left: -$tbnl--border-width;
    }
  }
}


/**
 * thumbnail__banner
 * --------------
 */

@mixin if-not-inherit ($property, $value) {
  @if $value != inherit {
    #{$property}: $value;
  }
}

@mixin banner-position {
  @if $thumbnail-banner--align == 'right' or $thumbnail-banner--align == 'left' {
    $rotate-direction: if($thumbnail-banner--align == 'left', 1, -1);

    #{$thumbnail-banner--align}: 100%;
    margin-#{$thumbnail-banner--align}: -$thumbnail-banner--gutter;
    transform-origin: top #{$thumbnail-banner--align};
    transform: rotate(45deg * $rotate-direction);
  } @else {
    @error "The variable `$thumbnail-banner--align` must be a string value that can only be 'right' or 'left'";
  }
}

@if $thumbnail-banner--generation {
  .thumbnail__banner {
    @include banner-position;
    position: absolute;
    top: 0;
    background-color: $thumbnail-banner--background-color;
    height: $thumbnail-banner--height;
    width: get-hypotenuse($thumbnail-banner--gutter, $thumbnail-banner--gutter);
    text-align: center;
    user-select: none;

    &::before,
    &::after {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      height: 100%;
      background-color: $thumbnail-banner--background-color;

      /**
      * Big static value in order to make sure that for any
      * `thumbnail banner gutter` value the before and after goes off the
      * thumbnail element
      */
      width: 10000px;

      /**
      * We set a negative margin on x axis in order to avoid a very thin band
      * where the `::after` and `::before` pseudo elements are not perfectly
      * sticked to the `.thumbnail__banner`.
      */
      margin: 0 -1px;
    }

    &::before {
      left: 100%;
    }

    &::after {
      right: 100%;
    }
  }

  .thumbnail__banner-content {
    // `if-not-inherit` mixin avoid to generate useless declaration with an
    // inherit value while still allow customisation via variables
    @include if-not-inherit ('color', $thumbnail-banner--color);
    @include if-not-inherit ('font-size', $thumbnail-banner--font-size);
    @include if-not-inherit ('line-height', $thumbnail-banner--line-height);
    @include if-not-inherit ('font-weight', $thumbnail-banner--font-weight);
    @include if-not-inherit ('font-style', $thumbnail-banner--font-style);

    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 1;
    white-space: nowrap;
  }
}



/**
 * thumbnail-grid
 * ==============
 */

.thumbnail-grid {
  list-style: none;
  padding-left: 0;
  margin-bottom: 0;
  display: flex;
  flex-wrap: wrap;
  margin-left: floor(-$tbnlgrid--gutter / 2);
  margin-right: ceil(-$tbnlgrid--gutter / 2);
  margin-top: 0;

  &,
  * {
    box-sizing: border-box;
  }
}


/**
 * thumbnail-grid__col
 * -------------------
 */

.thumbnail-grid__col {
  width: 100%;
  padding-left: floor($tbnlgrid--gutter / 2);
  padding-right: ceil($tbnlgrid--gutter / 2);
  margin-bottom: $tbnlgrid--gutter;
  display: flex;

  @each $viewport, $width in $tbnlgrid-col--width {
    @include media-query($viewport, 'mobile-first') {
      width: $width;
    }
  }
}
